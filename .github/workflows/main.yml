name: Django-app workflow

on:
  push:
    branches: [master]

jobs:
  build_push_backend_to_DockerHub:
    name: Building back image and pushing it to Docker Hub
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push "foodgram/backend" to DockerHub
      uses: docker/build-push-action@v2
      with:
        context: backend/
        push: true
        no-cache: true
        tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  build_push_frontend_to_DockerHub:
    name: Building front image and pushing it to Docker Hub
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to Docker
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push "foodgram/frontend" to DockerHub
      uses: docker/build-push-action@v2
      with:
        context: frontend/
        push: true
        no-cache: true
        tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  deploy:
    runs-on: ubuntu-20.04
    needs:
      - build_push_backend_to_DockerHub
      - build_push_frontend_to_DockerHub
    steps:
    - name: remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSWORD }}
        script: 
          sudo docker compose down
          cd projects/foodgram/
          touch .env
          sudo docker pull tsekov/foodgram_backend:latest
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} > .env
          echo DEBUG=${{ secrets.DEBUG }} > .env
          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} > .env
          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          sudo docker-compose up -d 
#          echo DEBUG=${{ secrets.DEBUG }} >> .env
#          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
#          echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
#          echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
#          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
#          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
#          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
#          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
#          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
#          sudo docker-compose stop
#          sudo docker rm foodgram_frontend_1
#          sudo docker rm foodgram_backend_1
#         sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest
#          sudo docker rmi ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
#          sudo docker-compose up -d

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!

          
  # build_and_push_to_docker_hub:
  #     name: Push Docker image to Docker Hub
  #     runs-on: ubuntu-latest
  #     needs: tests
  #     steps:
  #       - name: Check out the repo
  #         uses: actions/checkout@v2 
  #       - name: Set up Docker Buildx
  #         uses: docker/setup-buildx-action@v1 
  #       - name: Login to Docker 
  #         uses: docker/login-action@v1 
  #         with:
  #           username: ${{ secrets.DOCKER_USERNAME }}
  #           password: ${{ secrets.DOCKER_PASSWORD }}
  #       - name: Push backend to Docker Hub
  #         uses: docker/build-push-action@v2 
  #         with:
  #           context: backend/
  #           no-cache: true
  #           push: true
  #           tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
  #       - name: Push frontend to Docker Hub
  #         uses: docker/build-push-action@v2
  #         with:
  #           push: true
  #           context: frontend/
  #           no-cache: true
  #           tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build_and_push_to_docker_hub
  #   if: github.ref == 'refs/heads/master'
  #   steps:
  #   - name: executing remote ssh commands to deploy
  #     uses: appleboy/ssh-action@master
  #     with:
  #       host: ${{ secrets.SERVER_IP }}
  #       username: ${{ secrets.USER }}
  #       key: ${{ secrets.SSH_KEY }}
  #       passphrase: ${{ secrets.SSH_PASSWORD }}
  #       script: |
  #           sudo docker pull tsekov/foodgram_backend:latest
  #           sudo docker-compose stop
  #           sudo docker-compose rm backend
  #           touch .env 
  #           echo SECRET_KEY=${{ secrets.SECRET_KEY }} > .env
  #           echo DEBUG=${{ secrets.DEBUG }} > .env
  #           echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} > .env
  #           echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
  #           echo DB_NAME=${{ secrets.DB_NAME }} >> .env
  #           echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
  #           echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
  #           echo DB_HOST=${{ secrets.DB_HOST }} >> .env
  #           echo DB_PORT=${{ secrets.DB_PORT }} >> .env
  #           sudo docker-compose up -d 
  # send_message:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #   - name: send message
  #     uses: appleboy/telegram-action@master
  #     with:
  #       to: ${{ secrets.TELEGRAM_TO }}
  #       token: ${{ secrets.TELEGRAM_TOKEN }}
  #       message: ${{ github.workflow }} успешно выполнен!
